'use strict';
const Device = require('./device');
const Sensor = require('./sensor');
const Helper = require('../helper/helper');
const Errors = require('http-errors');

class Simulator {
  constructor(options) {
    this.logger = options.logger;
    this.port = options.port;
    this.deviceList = [];
  }

  /**
   * Creates Devices & starts
   */
  async autoGenerateDevices(maxDevices, maxSensors) {
    // Each device should hanve a random number of sensors
    this.logger.info('Creating devices'); 
    for (let i = 0; i < maxDevices; i++) {
      let sensors = this.createSensorArray(Helper.getRandomInt(maxSensors));
      let device = new Device({
        logger: this.logger,
        url: '/api/_/device',
        port: this.port,
        name: `Device-${i}`,
        sensors: sensors
      });
      
      this.deviceList.push(device);
    }
    this.logger.info('Completed creating devices');
  }

  createLocalDevices(list) {
    this.deviceList = list.map((device) => {
      // Create device objects
      let dev = new Device({
        name: device.name,
        port: this.port,
        logger: this.logger,
        url: '/api/_/device',
      });

      // Create sensor objects
      let sensorArray = device.sensors.map((sensor) => {
        return new Sensor({
          name: sensor.name,
          value: sensor.value,
          unit: sensor.unit
        });
      });

      // Sensor & device id
      dev.setSensors(sensorArray);
      dev.setId(device.id);
      return dev;
    });
  }

  /**
   * Returns an array of sensors
   * @param {Number} max - Maximum number of sensors 
   */
  createSensorArray(max) {
    let sensors = [];
    for (let i = 0; i <= max; i++) {
      sensors.push(this.createSensor(`Sensor-${i}`));
    }
    return sensors;
  }

  /**
   * Create and and return sensor object
   * @param {String} name - Sensor name
   */
  createSensor(name) {
    let units = [
      'Celcius',
      'Volt',
      'Ampere',
      'Pascal',
      'Decibal'
    ];

    return new Sensor({
      name: name,
      value: Helper.getRandomInt(),
      unit: units[Helper.getRandomInt(5)]
    });
  }

  /**
   * Start simulation
   */
  start(skip) {
    const list = this.deviceList.map(async (device) => {
      return await device.start(skip);
    });

    return Promise.all(list)
      .then(() => this.logger.info('Successfully started all devices'))
      .catch((err) => {
        this.logger.error(err);
        throw new Errors.InternalServer();
      });
  }
}
module.exports = Simulator;